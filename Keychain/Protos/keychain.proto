syntax = "proto3";

package keychain;

option csharp_namespace = "keychain";

import "google/protobuf/empty.proto";

import "shared.proto";

/*
  Messaggio che descrive la chiave aes principale, utilizzata per crittografare tutte le altre chiavi.
*/
message MasterKey {
  bytes encryptedData = 1;
  bytes iv = 2;
}
/*
  Messaggio che descrive la coppia di chiavi del singolo utente, utilizzato per lo scambio di chiavi con altri utenti. 
*/
message UserKeyPairCreationRequest {
  bytes public_key = 1;
  bytes encrypted_private_key = 2;
  // iv della chiave privata cifrata
  bytes iv = 3;
}
/*
  Messaggio che descrive la chiave di una chat
*/
message ChatKeyCreationRequest {
  string chat_collection_name = 1;
  string other_user_id = 2;
  bytes encrypted_key_for_other_user = 3;
  bytes encrypted_key = 4;
  bytes iv = 5;
  bytes encrypted_key_for_supervisors = 6;
}
/*
  Messaggio che descrive la chiave di un membro di un gruppo quando viene creato
*/
message GroupMemberKey {
  string user_id = 1;
  bytes data = 2;
  bytes iv = 3;
}
/*
  Messaggio che descrive le chiavi create quando una chat di gruppo viene creata, creator_key è la chiave della chat
  crittografata con la chiave principale dell'utente, members_keys è la chiave della chat crittografata con la chiave pubblica di ogni membro aggiunto durante la creazione.
  membro aggiunto durante la creazione
*/
message GroupKeysCreationRequest {
  bytes encrypted_creator_key = 1;
  bytes iv = 2;
  string group_collection_name = 3;
  bytes encrypted_key_for_supervisors = 4;
  repeated GroupMemberKey members_keys = 5;
}
/*
  Messaggio che descrive la chiave di un membro di un gruppo aggiunto successivamente, la chiave è criptata con la chiave pubblica dell'utente
*/
message UserGroupKeyCreationRequest {
  string user_id = 1;
  string chat_collection_name = 2;
  bytes encrypted_key = 3;
}
/*
  Messaggio che rappresenta una chiave del supervisore crittografata con la chiave pubblica dell'utente o con la chiave master.
*/
message SupervisorKeyCreationRequest {
  bytes encrypted_key = 1;
  string user_id = 2;
  optional bytes iv = 3;
}
/*
  Messaggio semplice con un id che è specializzato dal contesto
*/
message KeyFromIdRequest {
  string id = 1;
}
/*
  Messaggio utilizzato per aggiornare una chiave esistente, l'id è specializzato dal contesto
*/
message UpdateKeyRequest {
  string key_id = 1;
  bytes key_data = 2;
  bytes iv = 3;
  bool is_encrypted_with_public_key = 4;
}
/*
  Messaggio che rappresenta più chiavi da aggiornare
*/
message UpdateKeysRequest {
  repeated UpdateKeyRequest chat_keys = 1;
  repeated UpdateKeyRequest group_keys = 2;
  optional UpdateUserKeyPairRequest key_pair = 3;
  optional MasterKey master_key = 4;
}
/*
  Messaggio utilizzato per aggiornare una coppia di chiavi esistente, l'id è specializzato dal contesto
*/
message UpdateUserKeyPairRequest {
  optional bytes public_key_data = 2;
  bytes private_key_data = 4;
  bytes private_key_iv = 5;
}
/*
  Messaggio che rappresenta più chiavi di supervisore che devono essere aggiornate
*/
message UpdateSupervisorKeysRequest {
  repeated UpdateKeyRequest chat_keys = 1;
  repeated UpdateKeyRequest group_keys = 2;
  optional MasterKey master_key = 3;
}
/*
  Messaggio che rappresenta una chiave recuperata con il portachiavi corrispondente, i parametri sono popolati in base al tipo di chiave
*/
message KeyResponse {
  optional string id = 1;
  optional bytes data = 2;
  optional bytes iv = 3;
  optional string chat_collection_name = 4;
}
/*
  Messaggio che rappresenta più chiavi dello stesso tipo (i parametri devono essere popolati in modo uguale)
*/
message KeysResponse {
  repeated KeyResponse keys = 1;
}
/*
  Messaggio che rappresenta una chiave crittografata dalla chiave pubblica dell'utente o del supervisore.
*/
message KeyEncryptedWithPublicKey {
  bytes encrypted_key_data = 1;
  string key_id = 2;
}
/*
  Messaggio che rappresenta chiavi multiple crittografate con la chiave pubblica dell'utente o del supervisore
*/
message KeysEncryptedWithPublicKey {
  repeated KeyEncryptedWithPublicKey keys = 1;
}
/*
  Messaggio che rappresenta la richiesta di cancellazione di una chiave con l'id proprietario corrispondente; se l'utente vuole cancellare la propria chiave, il parametro  è un parametro opzionale
*/
message DeleteKeyFromUserIdRequest {
  optional string user_id = 1;
}

service GrpcKeychainServices {
  // creare la chiave master dell'utente, l'id dell'utente è ottenuto dall'autenticazione
  rpc CreateUserMasterKey(MasterKey) returns (shared.Result);
  // create user's public and private key, the user id is obtained by the authentication
  rpc CreateUserKeyPair (UserKeyPairCreationRequest) returns (shared.Result);
  // create chat key, the request must contain the counter part key encrypted with is pub key
  rpc CreateChatKeys (ChatKeyCreationRequest) returns (shared.Result);
  // create group key, the request contain also the keys of others members
  rpc CreateGroupKeys (GroupKeysCreationRequest) returns (shared.Result);
  // when a user is added later to a group, add the group key to the user keychain
  rpc CreateUserGroupKey (UserGroupKeyCreationRequest) returns (shared.Result);

  rpc CreateSupervisorUserMasterKey (SupervisorKeyCreationRequest) returns (shared.Result);
  rpc CreateSupervisorKeyPair (UserKeyPairCreationRequest) returns (shared.Result);

  rpc GetUserMasterKey(google.protobuf.Empty) returns (KeyResponse);
  // retrieve a user's public key from is id
  rpc GetUserPublicKey (KeyFromIdRequest) returns (KeyResponse);
  rpc GetUserPrivateKey (google.protobuf.Empty) returns (KeyResponse);

  rpc GetChatKey (KeyFromIdRequest) returns (KeyResponse);
  rpc GetGroupKey(KeyFromIdRequest) returns (KeyResponse);
  rpc GetChatsKeys (google.protobuf.Empty) returns (KeysResponse);
  rpc GetGroupsKey(google.protobuf.Empty) returns (KeysResponse);

  rpc GetUserChatKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);
  rpc GetUserGroupKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);

  rpc GetUserSupervisorMasterKey(google.protobuf.Empty) returns (KeyResponse);
  rpc GetSupervisorPublicKey(google.protobuf.Empty) returns (KeyResponse);
  rpc GetSupervisorPrivateKey(google.protobuf.Empty) returns (KeyResponse);

  rpc GetSupervisedChatKey(KeyFromIdRequest) returns (KeyResponse);
  rpc GetSupervisedGroupKey(KeyFromIdRequest) returns (KeyResponse);
  rpc GetSupervisedChatsKeys(google.protobuf.Empty) returns (KeysResponse);
  rpc GetSupervisedGroupsKeys(google.protobuf.Empty) returns (KeysResponse);

  rpc GetUserSupervisorMasterKeyEncryptedWithPublicKey(google.protobuf.Empty) returns (KeyEncryptedWithPublicKey);
  rpc GetSupervisedChatsKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);
  rpc GetSupervisedGroupsKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);

  // update the user's master key with the corresponding user owner id
  rpc UpdateUserMasterKey(MasterKey) returns (shared.Result);
  // update the user's key pair with the corresponding user owner id
  rpc UpdateUserKeyPair (UpdateUserKeyPairRequest) returns (shared.Result);
  // update a chat key with the corresponding owner id and key id
  rpc UpdateUserChatKey (UpdateKeyRequest) returns (shared.Result);
  // update a group key with the corresponding owner id and key id
  rpc UpdateUserGroupKey (UpdateKeyRequest) returns (shared.Result);
  // update multiples keys with the corresponding owner id and keys ids
  rpc UpdateMultipleUserKeys (UpdateKeysRequest) returns (shared.Result);

  // update the user supervisor's master key from is user id
  rpc UpdateUserSupervisorMasterKey (MasterKey) returns (shared.Result);
  // update the supervised chat key with the corresponding key id
  rpc UpdateSupervisedChatKey (UpdateKeyRequest) returns (shared.Result);
  // update the supervised group key with the corresponding key id
  rpc UpdateSupervisedGroupKey (UpdateKeyRequest) returns (shared.Result);
  // update multiple keys with the corresponding ids
  rpc UpdateMultipleSupervisorKeys (UpdateSupervisorKeysRequest) returns (shared.Result);

  // delete user master key from user id, if the request id is empty or required permission is missing
  rpc DeleteUserMasterKey (DeleteKeyFromUserIdRequest) returns (shared.Result);
  // delete user's private and public keys from user id, if the request id is empty or required permission is missing
  rpc DeleteUserKeyPair (DeleteKeyFromUserIdRequest) returns (shared.Result);
  // delete chat key from user id and chat collection name
  rpc DeleteUserChatKey (KeyFromIdRequest) returns (shared.Result);
  // delete group key from user id and chat collection name
  rpc DeleteUserGroupKey (KeyFromIdRequest) returns (shared.Result);
  // delete all the user keys from user id, if the request id is empty or required permission is missing
  rpc DeleteAllUserKeys (DeleteKeyFromUserIdRequest) returns (shared.Result);

  // delete the user's master key for supervisor from user id, if the request id is empty or required permission is missing
  rpc DeleteUserSupervisorMasterKey (DeleteKeyFromUserIdRequest) returns (shared.Result);
  // delete the key of a supervised chat
  rpc DeleteSupervisorChatKey (KeyFromIdRequest) returns (shared.Result);
  // delete the key of a supervised group
  rpc DeleteSupervisorGroupKey (KeyFromIdRequest) returns (shared.Result);
}