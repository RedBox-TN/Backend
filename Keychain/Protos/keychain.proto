syntax = "proto3";

package keychain;

option csharp_namespace = "keychain";

enum KeyType {
  BOTH = 0;
  PUBLIC = 1;
  PRIVATE = 2;
}

message Nil {}

message KeyMessage {
  string user_id = 1;
  bytes data = 2;
}

message InsertUserKeysRequest {
  bytes public_key = 1;
  bytes private_key = 2;
}

message InsertGroupKeysRequest {
  bytes creator_private_key = 1;
  bytes group_public_key = 2;
  string group_id = 3;
  repeated KeyMessage members_private = 4;
}

message InsertSupervisorKeysRequest {
  bytes private_key = 1;
  bytes public_key = 2;
}

message InsertUserAdditionalKeyRequest {
  string context_id = 1;
  KeyMessage private = 2;
}

message RequestWithId {
 string id = 1;
}

message UpdateKeyRequest {
  string id = 1;
  bytes data = 2;
}

service GrpcInsertKeyServices {
  rpc InsertUserKeys (InsertUserKeysRequest) returns (Result);
  rpc InsertGroupKeys (InsertGroupKeysRequest) returns (Result);
  rpc InsertSupervisorKeys (InsertSupervisorKeysRequest) returns (Result);
  rpc InsertUserGroupKey (InsertUserAdditionalKeyRequest) returns (Result);
  rpc InsertUserSupervisorKey (InsertUserAdditionalKeyRequest) returns (Result);
}

service GrpcGetKeyServices {
  rpc GetUserPublicKey (RequestWithId) returns (KeyResponse);
  rpc GetGroupPublicKey (RequestWithId) returns (KeyResponse);
  rpc GetSupervisorPublicKey (RequestWithId) returns (KeyResponse);
  rpc GetUserPrivateKey (Nil) returns (KeyResponse);
  rpc GetGroupPrivateKey(RequestWithId) returns (KeyResponse);
  rpc GetSupervisorPrivateKey(RequestWithId) returns (KeyResponse);
}

service GrpcUpdateKeyServices {
  rpc UpdateUserPrivate (UpdateKeyRequest) returns (Result);
  rpc UpdateUserGroupKey (UpdateKeyRequest) returns (Result);
  rpc UpdateUserSupervisorKey (UpdateKeyRequest) returns (Result);
}

service GrpcDeleteKeyServices {
  rpc DeleteUserKeys (RequestWithId) returns (Result);
  rpc DeleteUserGroupKey (RequestWithId) returns (Result);
  rpc UserSupervisorKey (RequestWithId) returns (Result);
}

enum Status {
  OK = 0;
  ERROR = 1;
  NOT_AUTHORIZED = 2;
}

message Result {
  Status status = 1;
}

message KeyResponse {
  Status status = 1;
  optional bytes data = 2;
}