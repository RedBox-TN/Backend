syntax = "proto3";

package keychain;

option csharp_namespace = "keychain";

message Nil {}
/*
  Message describing the main aes key which is used to encrypt all other keys
*/
message MasterKey {
  bytes encryptedData = 1;
  bytes iv = 2;
}
/*
  Message describing the key pair of individual user, used to exchange keys with other users  
*/
message UserKeyPairCreationRequest {
  bytes public_key = 1;
  bytes encrypted_private_key = 2;
  bytes iv = 3; // iv of the encrypted private key
}
/*
  Message describing the key of a chat
*/
message ChatKeyCreationRequest {
  string chat_collection_name = 1;
  string other_user_id = 2;
  bytes encrypted_key_for_other_user = 3;
  bytes encrypted_key = 4;
  bytes iv = 5;
  bytes encrypted_key_for_supervisors = 6;
}
/*
  Message describing the key of a member of a group when is created
*/
message GroupMemberKey {
  string user_id = 1;
  bytes data = 2;
  bytes iv = 3;
}
/*
  Message describing keys created when a group chat is crated, creator_key is the key of the chat
  encrypted with user master key, members_keys is the chat key encrypted with the public key of each
  member added during creation 
*/
message GroupKeysCreationRequest {
  bytes encrypted_creator_key = 1;
  bytes iv = 2;
  string group_collection_name = 3;
  bytes encrypted_key_for_supervisors = 4;
  repeated GroupMemberKey members_keys = 5;
}
/*
  Message describing the key of a member of a group added later, the key is encrypted with the user public
*/
message UserGroupKeyCreationRequest {
  string user_id = 1;
  string chat_collection_name = 2;
  bytes encrypted_key = 3;
}
/*
  Message representing a supervisor key encrypted with user public key or master key
*/
message SupervisorKeyCreationRequest {
  bytes encrypted_key = 1;
  string user_id = 2;
  optional bytes iv = 3;
}
/*
  Retrieve a key given an id which is specialized by the context
*/
message KeyFromIdRequest {
  string id = 1;
}
/*
  Message used to update an existing key, id is specialized by the context
*/
message UpdateKeyRequest {
  string key_id = 1;
  bytes key = 2;
  bytes iv = 3;
}
/*
  Message used to update an existing key pair, id is specialized by the context
*/
message UpdateUserKeyPairRequest {
  bytes public_key = 1;
  bytes private_key = 2;
  bytes iv = 3;
}

service GrpcKeysCreationServices {
  rpc CreateUserMasterKey(MasterKey) returns (Result);
  rpc CreateUserKeys (UserKeyPairCreationRequest) returns (Result);
  rpc CreateChatKeys (ChatKeyCreationRequest) returns (Result);
  rpc CreateGroupKeys (GroupKeysCreationRequest) returns (Result);
  rpc CreateUserGroupKey (UserGroupKeyCreationRequest) returns (Result);
  rpc CreateSupervisorUserMasterKey (SupervisorKeyCreationRequest) returns (Result);
  rpc CreateSupervisorKeyPair (UserKeyPairCreationRequest) returns (Result);
}

service GrpcUserKeysRetrievingServices {
  rpc GetUserMasterKey(Nil) returns (KeyResponse);
  rpc GetUserPublicKey (KeyFromIdRequest) returns (KeyResponse);
  rpc GetUserPrivateKey (Nil) returns (KeyResponse);
  
  rpc GetChatKey (KeyFromIdRequest) returns (KeyResponse);
  rpc GetGroupKey(KeyFromIdRequest) returns (KeyResponse);
  rpc GetChatsKeys (KeyFromIdRequest) returns (KeysResponse);
  rpc GetGroupsKey(KeyFromIdRequest) returns (KeysResponse);

  rpc GetUserChatKeysEncryptedWithPublicKey(Nil) returns (KeysEncryptedWithPublicKey);
  rpc GetUserGroupKeysEncryptedWithPublicKey(Nil) returns (KeysEncryptedWithPublicKey);
}

service GrpcSupervisorKeysRetrievingServices {
  rpc GetUserSupervisorMasterKey(Nil) returns (KeyResponse);
  rpc GetSupervisorPublicKey(Nil) returns (KeyResponse);
  rpc GetSupervisorPrivateKey(Nil) returns (KeyResponse);

  rpc GetSupervisedChatKey(KeyFromIdRequest) returns (KeyResponse);
  rpc GetSupervisedGroupKey(KeyFromIdRequest) returns (KeyResponse);
  rpc GetSupervisedChatsKeys(Nil) returns (KeysResponse);
  rpc GetSupervisedGroupsKeys(Nil) returns (KeysResponse);

  rpc GetUserSupervisorKeyEncryptedWithPublicKey(Nil) returns (KeyEncryptedWithPublicKey);
  rpc GetSupervisedChatsKeysEncryptedWithPublicKey(Nil) returns (KeysEncryptedWithPublicKey);
  rpc GetSupervisedGroupsKeysEncryptedWithPublicKey(Nil) returns (KeysEncryptedWithPublicKey);
}

service GrpcKeysUpdatingServices {
  rpc UpdateUserMasterKey(MasterKey) returns (Result);
  rpc UpdateUserKeyPair (UpdateUserKeyPairRequest) returns (Result);
  rpc UpdateUserChatKey (UpdateKeyRequest) returns (Result);
  rpc UpdateUserGroupKey (UpdateKeyRequest) returns (Result);
  rpc UpdateUserSupervisorKey (UpdateKeyRequest) returns (Result);
}

service GrpcKeysDeletionServices {
  rpc DeleteUserMasterKey (KeyFromIdRequest) returns (Result);
  rpc DeleteUserKeyPair (KeyFromIdRequest) returns (Result);
  rpc DeleteUserChatKey (KeyFromIdRequest) returns (Result);
  rpc DeleteUserGroupKey (KeyFromIdRequest) returns (Result);
  rpc UserSupervisorKey (KeyFromIdRequest) returns (Result);
}

enum Status {
  OK = 0;
  ERROR = 1;
}

message Result {
  Status status = 1;
  optional string error = 2;
}

message KeyResponse {
  optional bytes data = 1;
  optional bytes iv = 2;
  optional string chat_collection_name = 3;
}

message KeysResponse {
  repeated KeyResponse keys = 1;
}

message KeyEncryptedWithPublicKey {
  bytes encrypted_key_data = 1;
  string key_id = 2;
}

message KeysEncryptedWithPublicKey {
  repeated KeyEncryptedWithPublicKey keys = 1;
}
