syntax = "proto3";

package keychain;

option csharp_namespace = "keychain";

import "google/protobuf/empty.proto";

import "shared.proto";

/*
  Messaggio che descrive la chiave aes principale, utilizzata per crittografare tutte le altre chiavi.
*/
message MasterKey {
  // la chiave AES utilizzata per cifrare tutte le altre chiavi, cifrata con la password e trasformata in un array di byte
  bytes encrypted_data = 1;
  // l'iv utilizzato durante la procedura di cifratura della chiave, come array di byte
  bytes iv = 2;
}
/*
  Messaggio che descrive la coppia di chiavi del singolo utente, utilizzato per lo scambio di chiavi con altri utenti. 
*/
message UserKeyPairCreationRequest {
  // la chiave pubblica della coppia
  bytes public_key = 1;
  // la chiave privata della coppia, cifrata con la master key dell'utente
  bytes encrypted_private_key = 2;
  // iv della chiave privata cifrata
  bytes iv = 3;
}
/*
  Messaggio che descrive la chiave di una chat
*/
message ChatKeyCreationRequest {
  // il nome della collezione di MongoDB che contiene i messaggi, è uguale all'id del documento che descrive la chat
  string chat_collection_name = 1;
  // l'id dell'utente con cui si intende chattare
  string other_user_id = 2;
  // la chiave AES della chat cifrata con la chiave pubblica dell'utente con cui si intende chattare
  bytes encrypted_key_for_other_user = 3;
  // la chiave AES della chat cifrata con la master key dell'utente corrente
  bytes encrypted_key = 4;
  // l'iv utilizzato per cifrare la chiave dell'utente corrente
  bytes iv = 5;
  // la chiave AES della chat cifrata con la chiave pubblica dei supervisori
  bytes encrypted_key_for_supervisors = 6;
}
/*
  Messaggio che descrive la chiave di un membro di un gruppo quando viene creato
*/
message GroupMemberKey {
  // l'id dell'utente
  string user_id = 1;
  // la chiave AES come array di byte
  bytes data = 2;
  // l'iv con cui è stata cifrata
  bytes iv = 3;
}
/*
  Messaggio che descrive le chiavi create quando una chat di gruppo viene creata, creator_key è la chiave della chat
  crittografata con la chiave principale dell'utente, members_keys è la chiave della chat crittografata con la chiave pubblica di ogni membro aggiunto durante la creazione.
  membro aggiunto durante la creazione
*/
message GroupKeysCreationRequest {
  // la chiave AES del gruppo, cifrata con la master key dell'utente che lo ha creato
  bytes encrypted_creator_key = 1;
  // l'iv con cui è stata cifrata
  bytes iv = 2;
  // il nome della collezione del gruppo che contiene i messaggi, equivale all'id del documento che definisce il gruppo
  string group_collection_name = 3;
  // la chiave AES del gruppo cifrata con la chiave pubblica dei supervisori
  bytes encrypted_key_for_supervisors = 4;
  // la chiave AES del gruppo cifrata con la chiave pubblica del membro, una per ogni partecipante
  repeated GroupMemberKey members_keys = 5;
}
/*
  Messaggio che descrive la chiave di un membro di un gruppo aggiunto successivamente, la chiave è criptata con la chiave pubblica dell'utente
*/
message UserGroupKeyCreationRequest {
  // l'id dell'utente
  string user_id = 1;
  // il nome della collezione che contiene i messaggi del gruppo
  string chat_collection_name = 2;
  // la chiave AES del gruppo cifrata con la chiave pubblica dell'utente
  bytes encrypted_key = 3;
}
/*
  Messaggio che rappresenta una chiave del supervisore crittografata con la chiave pubblica dell'utente
*/
message SupervisorKeyCreationRequest {
  // la chiave master (AES) dei supervisori cifrata con la chiave pubblica dell'utente a cui è stato assegnato il permesso 
  bytes encrypted_key = 1;
  // l'id dell'utente
  string user_id = 2;
}
/*
  Messaggio utilizzato per aggiornare una chiave esistente, l'id è specializzato dal contesto
*/
message UpdateKeyRequest {
  // l'id della chiave
  string key_id = 1;
  // la chiave come array di byte
  bytes key_data = 2;
  // l'iv con cui è stata cifrata
  optional bytes iv = 3;
  // se True, allora la chiave è stata cifrata con la chiave pubblica dell'utente
  bool is_encrypted_with_public_key = 4;
}
/*
  Messaggio che rappresenta più chiavi da aggiornare, utile quando si cambia la master key
*/
message UpdateKeysRequest {
  // le chiavi delle chat aggiornate
  repeated UpdateKeyRequest chat_keys = 1;
  // le chiavi dei gruppi aggiornate
  repeated UpdateKeyRequest group_keys = 2;
  // la chiave pubblica e privata aggiornata
  optional UpdateUserKeyPairRequest key_pair = 3;
  // la master key dell'utente aggiornata
  optional MasterKey master_key = 4;
}
/*
  Messaggio utilizzato per aggiornare una coppia di chiavi esistente, l'id è specializzato dal contesto
*/
message UpdateUserKeyPairRequest {
  // la chiave pubblica come array di byte
  optional bytes public_key_data = 2;
  // la chiave privata cifrata con la chiave master dell'utente
  bytes private_key_data = 4;
  // l'iv con cui è stata cifrata la chiave privata dell'utente
  bytes private_key_iv = 5;
}
/*
  Messaggio che rappresenta più chiavi di supervisore che devono essere aggiornate, utile quando si cambia la master key dei supervisori
*/
message UpdateSupervisorKeysRequest {
  // le chiavi delle chat supervisionate da aggiornare
  repeated UpdateKeyRequest chat_keys = 1;
  // le chiavi dei gruppi supervisionati aggiornate
  repeated UpdateKeyRequest group_keys = 2;
  // la chiave master dell'utente supervisore aggiornata
  optional MasterKey master_key = 3;
}
/*
  Messaggio che rappresenta una chiave recuperata con il portachiavi corrispondente, i parametri sono popolati in base al tipo di chiave
*/
message KeyResponse {
  // l'id della chiave
  optional string id = 1;
  // la chiave cifrata come array di byte
  optional bytes data = 2;
  // l'iv con cui la chiave è stata cifrata
  optional bytes iv = 3;
  // il nome della collezione contenente i messaggi cifrati con questa chiave 
  optional string chat_collection_name = 4;
}
/*
  Messaggio che rappresenta più chiavi dello stesso tipo (i parametri devono essere popolati in modo uguale)
*/
message KeysResponse {
  // le chiavi recuperate
  repeated KeyResponse keys = 1;
}
/*
  Messaggio che rappresenta una chiave crittografata dalla chiave pubblica dell'utente o del supervisore.
*/
message KeyEncryptedWithPublicKey {
  // la chiave cifrata con la chiave pubblica
  bytes encrypted_key_data = 1;
  // l'id della chiave
  string key_id = 2;
}
/*
  Messaggio che rappresenta chiavi multiple crittografate con la chiave pubblica dell'utente o del supervisore
*/
message KeysEncryptedWithPublicKey {
  // le chiavi cifrate con la chiave pubblica
  repeated KeyEncryptedWithPublicKey keys = 1;
}
/*
  Messaggio che rappresenta la richiesta di cancellazione di una chiave con l'id proprietario corrispondente; se l'utente vuole cancellare la propria chiave, il parametro  è un parametro opzionale
*/
message DeleteKeyFromUserIdRequest {
  // l'id dell'utente di cui si intende eliminare le chiavi, in caso sia assente, viene usato l'id dell'utente che invia la richiesta
  optional string user_id = 1;
}

service GrpcKeychainServices {
  // crea la chiave master dell'utente, l'id dell'utente è ottenuto dall'autenticazione
  rpc CreateUserMasterKey(MasterKey) returns (shared.Result);
  // crea la chiave pubblica e privata dell'utente, l'id dell'utente è ottenuto dalla procedura di autenticazione.
  rpc CreateUserKeyPair (UserKeyPairCreationRequest) returns (shared.Result);
  // crea la chiave di chat, la richiesta deve contenere la chiave di controparte criptata con la chiave pub
  rpc CreateChatKeys (ChatKeyCreationRequest) returns (shared.Result);
  // crea la chiave del gruppo, la richiesta contiene anche le chiavi degli altri membri
  rpc CreateGroupKeys (GroupKeysCreationRequest) returns (shared.Result);
  // quando un utente viene aggiunto successivamente a un gruppo, aggiungere la chiave del gruppo al portachiavi dell'utente
  rpc CreateUserGroupKey (UserGroupKeyCreationRequest) returns (shared.Result);
  // crea la chiave master cifrata con la chiave dell'utente
  rpc CreateSupervisorUserMasterKey (SupervisorKeyCreationRequest) returns (shared.Result);
  // crea la chiave pubblica e privata per i supervisori
  rpc CreateSupervisorKeyPair (UserKeyPairCreationRequest) returns (shared.Result);
  // recupera la chiave principale (AES) dell'utente con cui tutte le altre chiavi sono cifrate, (l'id utente è ottenuto dalla sessione)
  rpc GetUserMasterKey(google.protobuf.Empty) returns (KeyResponse);
  // recupera la chiave pubblica di un utente da is id
  rpc GetUserPublicKey (shared.StringMessage) returns (KeyResponse);
  // recupera la chiave privata dell'utente (l'id utente è ottenuto dalla sessione)
  rpc GetUserPrivateKey (google.protobuf.Empty) returns (KeyResponse);
  // recupera la chiave utilizzata per cifrare i messaggi di una chat dato l'id
  rpc GetChatKey (shared.StringMessage) returns (KeyResponse);
  // recupera la chiave utilizzata per cifrare i messaggi di un gruppo dato l'id
  rpc GetGroupKey(shared.StringMessage) returns (KeyResponse);
  // recupera tutte le chiavi delle chat dell'utente (l'id utente è ottenuto dalla sessione)
  rpc GetChatsKeys (google.protobuf.Empty) returns (KeysResponse);
  // recupera tutte le chiavi dei gruppi di cui l'utente è membro (l'id utente è ottenuto dalla sessione)
  rpc GetGroupsKey(google.protobuf.Empty) returns (KeysResponse);
  // recupera tutte le chiavi delle chat dell'utente che sono state cifrate con la sua chiave pubblica, viene utilizzato quando un utente riceve un messaggio da una nuova chat
  rpc GetUserChatKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);
  // recupera tutte le chiavi dei gruppi di cui l'utente è membro e che sono state cifrate con la sua chiave pubblica, viene utilizzato quando un utente è inserito in un gruppo
  rpc GetUserGroupKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);
  // recupera la chiave supervisor dell'utente (l'id utente è ottenuto dalla sessione)
  rpc GetUserSupervisorMasterKey(google.protobuf.Empty) returns (KeyResponse);
  // recupera la chiave pubblica dei supervisori
  rpc GetSupervisorPublicKey(google.protobuf.Empty) returns (KeyResponse);
  // recupera la chiave privata supervisore di un utente 
  rpc GetSupervisorPrivateKey(google.protobuf.Empty) returns (KeyResponse);
  // recupera la chiave supervisore usata per leggere i messaggi della chat
  rpc GetSupervisedChatKey(shared.StringMessage) returns (KeyResponse);
  // recupera la chiave supervisore usata per leggere i messaggi del gruppo
  rpc GetSupervisedGroupKey(shared.StringMessage) returns (KeyResponse);
  // recupera le chiavi di tutte le chat supervisionate
  rpc GetSupervisedChatsKeys(google.protobuf.Empty) returns (KeysResponse);
  // recupera le chiavi di tutti i gruppi supervisionati
  rpc GetSupervisedGroupsKeys(google.protobuf.Empty) returns (KeysResponse);
  // recupera la chiave supervisore dell'utente cifrata con la sua chiave pubblica
  rpc GetUserSupervisorMasterKeyEncryptedWithPublicKey(google.protobuf.Empty) returns (KeyEncryptedWithPublicKey);
  // recupera le chiavi supervisore delle chats cifrate con la chiave pubblica supervisore che necessitano di essere decifrate con la chiave privata e crittografate con la master key
  rpc GetSupervisedChatsKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);
  // recupera le chiavi supervisore dei gruppi cifrate con la chiave pubblica supervisore che necessitano di essere decifrate con la chiave privata e crittografate con la master key
  rpc GetSupervisedGroupsKeysEncryptedWithPublicKey(google.protobuf.Empty) returns (KeysEncryptedWithPublicKey);
  // aggiorna la chiave master dell'utente con l'id proprietario dell'utente corrispondente
  rpc UpdateUserMasterKey(MasterKey) returns (shared.Result);
  // aggiorna la coppia di chiavi dell'utente con l'id proprietario dell'utente corrispondente
  rpc UpdateUserKeyPair (UpdateUserKeyPairRequest) returns (shared.Result);
  // aggiorna la chiave di chat con l'id del proprietario e l'id della chiave corrispondenti (utile quando si cambia la master key)
  rpc UpdateUserChatKey (UpdateKeyRequest) returns (shared.Result);
  // aggiorna la chiave di gruppo con l'id del proprietario e l'id della chiave corrispondenti
  rpc UpdateUserGroupKey (UpdateKeyRequest) returns (shared.Result);
  // aggiorna le chiavi multiple con l'id del proprietario e gli id delle chiavi corrispondenti
  rpc UpdateMultipleUserKeys (UpdateKeysRequest) returns (shared.Result);
  // aggiorna le chiavi multiple con l'id del proprietario e gli id delle chiavi corrispondenti
  rpc UpdateUserSupervisorMasterKey (MasterKey) returns (shared.Result);
  // aggiorna la chiave di chat supervisionata con l'id della chiave corrispondente
  rpc UpdateSupervisedChatKey (UpdateKeyRequest) returns (shared.Result);
  // aggiorna la chiave del gruppo supervisionato con l'id della chiave corrispondente
  rpc UpdateSupervisedGroupKey (UpdateKeyRequest) returns (shared.Result);
  // aggiorna più chiavi con gli id corrispondenti
  rpc UpdateMultipleSupervisorKeys (UpdateSupervisorKeysRequest) returns (shared.Result);
  // elimina la chiave master dell'utente dall'id utente, se l'id della richiesta è vuoto o manca l'autorizzazione richiesta
  rpc DeleteUserMasterKey (DeleteKeyFromUserIdRequest) returns (shared.Result);
  // elimina le chiavi private e pubbliche dell'utente dall'id utente, se l'id della richiesta è vuoto o manca l'autorizzazione necessaria
  rpc DeleteUserKeyPair (DeleteKeyFromUserIdRequest) returns (shared.Result);
  // elimina la chiave di chat dall'id utente e dal nome della raccolta di chat
  rpc DeleteUserChatKey (shared.StringMessage) returns (shared.Result);
  // elimina la chiave di chat dall'id utente e dal nome della raccolta di chat
  rpc DeleteUserGroupKey (shared.StringMessage) returns (shared.Result);
  // elimina tutte le chiavi utente dall'id utente, se l'id della richiesta è vuoto o manca l'autorizzazione necessaria
  rpc DeleteAllUserKeys (DeleteKeyFromUserIdRequest) returns (shared.Result);
  // elimina la chiave master dell'utente per il supervisore dall'id utente, se l'id della richiesta è vuoto o manca l'autorizzazione richiesta
  rpc DeleteUserSupervisorMasterKey (DeleteKeyFromUserIdRequest) returns (shared.Result);
  // elimina la chiave di una chat supervisionata
  rpc DeleteSupervisorChatKey (shared.StringMessage) returns (shared.Result);
  // elimina la chiave di un gruppo supervisionato
  rpc DeleteSupervisorGroupKey (shared.StringMessage) returns (shared.Result);
}