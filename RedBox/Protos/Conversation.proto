syntax = "proto3";

package redbox_services;

option csharp_namespace = "RedBoxServices";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "Shared.proto";

/*
  Basic messages that maps classes or used in other message definitions
*/

message Attachment {
  optional string id = 1;
  string name = 2;
  optional bytes data = 3;
}

message Message {
  optional string id = 1;
  google.protobuf.Timestamp timestamp = 2;
  bytes iv = 3;
  optional bool to_read = 4;
  optional bytes encrypted_text = 5;
  optional string sender_id = 6;
  optional Attachment attachment = 7;
}

message Chat {
  string id = 1;
  string other_user = 2;
  google.protobuf.Timestamp created_at = 3;
  repeated Message messages = 4;
}

message Group {
  string id = 1;
  string name = 2;
  repeated string members = 3;
  repeated string admins = 4;
  google.protobuf.Timestamp created_at = 5;
  repeated Message messages = 6;
  string pic_id = 7;
}

message Collection {
  oneof name {
    string chat = 1;
    string group = 2;
  }
}

message MessageOfCollection {
  Collection collection = 1;
  Message message = 2;
}

/*
  Request messages
*/

// requests the creations of a group
message GroupCreationRequest {
  string group_name = 1;
  repeated string members = 2;
  repeated string admins = 3;
  bytes pic = 4;
}

// requests messages from a specific collection in chunk, size is decided server side
message BucketRequest {
  Collection collection = 1;
  int32 next_chunk = 2;
}

// requests to mark one or more message as deleted for current user
message DeleteMessagesRequest {
  Collection collection = 1;
  repeated string message_ids = 2;
}

// requests an attachment, bucket_name is equivalent to collection_name
message AttachmentRequest {
  string bucket_name = 1;
  string file_id = 2;
}

/*
  Response messages
*/

// returns a chat containing messages in bucket 0
message ChatResponse {
  shared.Result result = 1;
  Chat chat = 2;
}

// returns multiple chats with only the latest messages, other messages are retrieved in background
message ChatsResponse {
  shared.Result result = 1;
  repeated Chat chats = 2;
}

// returns a group containing messages in bucket 0
message GroupResponse {
  shared.Result result = 1;
  Group group = 2;
}

// returns multiple groups with only the latest messages, other messages are retrieved in background
message GroupsResponse {
  shared.Result result = 1;
  repeated Group groups = 2;
}

// returns message in the requested bucket
message BucketResponse {
  shared.Result result = 1;
  repeated Message messages = 2;
}

/*
  Sync messages
*/
message ClientUpdate {
  oneof operation {
    MessageOfCollection message_sent = 1;
    DeleteMessagesRequest deleted_messages = 2;
    Collection collection_to_read = 3;
  }
}

message ServerUpdate {
  shared.Result result = 1;
  oneof operation {
    MessageOfCollection received_message = 2;
    Chat new_chat = 3;
    Group new_group = 4;
  }
}

service GrpcConversationServices {
  rpc GetUserGroupFromId (shared.IdMessage) returns (GroupResponse);
  rpc GetAllUserGroups (google.protobuf.Empty) returns (GroupsResponse);
  rpc CreateGroup (GroupCreationRequest) returns (GroupResponse);

  rpc CreateChat (shared.IdMessage) returns (ChatResponse);
  rpc GetChatFromId (shared.IdMessage) returns (ChatResponse);
  rpc GetAllUserOwnChats (google.protobuf.Empty) returns (ChatsResponse);

  rpc GetMessagesInRange (BucketRequest) returns (BucketResponse);
  rpc GetAttachment (AttachmentRequest) returns (Attachment);
  rpc Sync (stream ClientUpdate) returns (stream ServerUpdate);
}