syntax = "proto3";

package redbox_services;

option csharp_namespace = "RedBoxServices";

import "google/protobuf/empty.proto";

import "Shared.proto";

message GrpcPermission {
  string name = 1;
  uint32 code = 2;
}

message GrpcRole {
  optional string id = 1; // optional | not used on creation
  repeated GrpcPermission permissions = 2;
  string description = 3;
  string name = 4;
}

message GrpcUser {
  optional string id = 1; // optional | Generated by MongoDB on user creation
  string name = 2;
  string surname = 3;
  string email = 4;
  string role_id = 5;
  optional bool is_blocked = 8; // optional | Not sent on user creation
  optional bool is_fa_enabled = 9; // optional | For check in modifications
  string username = 10;
  repeated string removed_chats = 11;
  repeated string added_chats = 12;
  string biography = 13;
  string path_to_pic = 14;
  repeated string chats = 15;
}

message GrpcUserFetch {
  oneof identifier{
    string id = 1;
    string username = 2;
    string email = 3;
  }
}

message ForgottenPasswordRequest {
  string token = 1;
  string new_password = 2;
}

message PasswordChange {
  string old_password = 2;
  string new_password = 3;
}

message StringRequest{
  string value = 1;
}

message GrpcUserResult {
  repeated GrpcUser user = 1;
  shared.Result status = 2;
}

message Grpc2faResult {
  string qrcode = 1;
  string manual_code = 2;
  shared.Result status = 3;
}

message GrpcProvisionResult {
  bool fa_provisioning = 1;
  bool password_provisioning = 2;
  bool key_provisioning = 3;
  shared.Result status = 4;
}

service GrpcUserServices {
  rpc ModifyUser (GrpcUser) returns (shared.Result);
  rpc TokenCheck (StringRequest) returns (shared.Result);
  rpc ForgottenPasswordReset (ForgottenPasswordRequest) returns (shared.Result);
  rpc FinalizeEmailChange (StringRequest) returns (shared.Result);
  rpc FAStateChange (GrpcUser) returns (Grpc2faResult);
  rpc FetchUser (GrpcUserFetch) returns (GrpcUserResult);
  rpc FetchAllUsers (google.protobuf.Empty) returns (GrpcUserResult);
  rpc AccountProvision (GrpcUser) returns (GrpcProvisionResult);
  rpc UserPasswordChange (PasswordChange) returns (shared.Result);
}

service GrpcAdminServices {
  rpc CreateUser (GrpcUser) returns (shared.Result);
  rpc DeleteUser (GrpcUser) returns (shared.Result);
  rpc SetUserRandomPassword (StringRequest) returns (shared.Result);
  rpc BlockStateChange (GrpcUser) returns (shared.Result);
  rpc AdminModifyUser (GrpcUser) returns (shared.Result);
  //TODO bulk operations
}