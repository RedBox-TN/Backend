syntax = "proto3";

package redbox_services;

option csharp_namespace = "RedBoxServices";

import "google/protobuf/empty.proto";

import "Shared.proto";

message GrpcPermission {
  string name = 1;
  uint32 code = 2;
}

message GrpcRole {
  optional string id = 1; // optional | not used on creation
  repeated GrpcPermission permissions = 2;
  string description = 3;
  string name = 4;
}

message GrpcUser {
  optional string id = 1; // optional | Generated by MongoDB on user creation
  string name = 2;
  string surname = 3;
  string email = 4;
  string roleid = 5;
  optional bool isblocked = 8; // optional | Not sent on user creation
  optional bool isfaenabled = 9; // optional | For check in modifications
  string username = 10;
  repeated string removedchats = 11;
  repeated string addedchats = 12;
  string biography = 13;
  string pathtopic = 14;
  repeated string chats = 15;
}

message GrpcPasswordMod {
  string password = 1;
  optional string newpassword = 2;
  string token = 3;
}

message GrpcToken {
  string token = 1;
}

message GrpcUserResult {
  repeated GrpcUser user = 1;
  shared.Result status = 2;
}

message Grpc2faResult {
  string qrcode = 1;
  string manualcode = 2;
  shared.Result status = 3;
}

message GrpcProvisionResult {
  bool faprovisioning = 1;
  bool passwordprovisioning = 2;
  bool keyprovisioning = 3;
  shared.Result status = 4;
}

service GrpcUserServices {
  rpc CreateUser (GrpcUser) returns (shared.Result);
  rpc DeleteUser (GrpcUser) returns (shared.Result);
  rpc ModifyUser (GrpcUser) returns (shared.Result);
  rpc TokenCheck (GrpcToken) returns (shared.Result);
  rpc ModifyPassword (GrpcPasswordMod) returns (shared.Result);
  rpc PasswordReset (GrpcUser) returns (shared.Result);
  rpc FinalizeEmailChange (GrpcToken) returns (shared.Result);
  //TODO bulk operations
  rpc FAStateChange (GrpcUser) returns (Grpc2faResult);
  rpc BlockStateChange (GrpcUser) returns (shared.Result);
  rpc FetchUser (GrpcUser) returns (GrpcUserResult); 
  rpc FetchAllUsers (google.protobuf.Empty) returns (GrpcUserResult);
  rpc AccountProvision (GrpcUser) returns (GrpcProvisionResult);
}