syntax = "proto3";

package redbox_services;

option csharp_namespace = "RedBoxServices";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "shared.proto";

/*
  Basic messages that maps classes or used in other message definitions
*/

message GrpcAttachment {
  optional string id = 1;
  string name = 2;
  optional bytes data = 3;
}

message GrpcMessage {
  optional string id = 1;
  google.protobuf.Timestamp timestamp = 2;
  bytes iv = 3;
  optional bytes encrypted_text = 4;
  optional string sender_id = 5;
  repeated GrpcAttachment attachments = 6;
}

message GrpcChat {
  string id = 1;
  repeated string members = 2;
  google.protobuf.Timestamp created_at = 3;
  repeated GrpcMessage messages = 4;
}

message GrpcGroup {
  string id = 1;
  string name = 2;
  repeated string members = 3;
  repeated string admins = 4;
  google.protobuf.Timestamp created_at = 5;
  repeated GrpcMessage messages = 6;
}

message Collection {
  oneof name {
    string chat = 1;
    string group = 2;
  }
}

message MessageOfCollection {
  Collection collection = 1;
  GrpcMessage message = 2;
}

// represent basic info about a user
message UserInfo {
  string id = 1;
  string username = 2;
  string name = 3;
  string surname = 4;
  string email = 5;
}

/*
  Request messages
*/

// requests the creations of a group
message GroupCreationRequest {
  string name = 1;
  repeated string members = 2;
  repeated string admins = 3;
}

// requests messages from a specific collection in chunk, size is decided server side
message MessageChunkRequest {
  Collection collection = 1;
  int32 chunk = 2;
}

// requests to mark one or more message as deleted for current user
message DeleteMessagesRequest {
  Collection collection = 1;
  repeated string message_ids = 2;
}

// requests an attachment, bucket_name is equivalent to collection_name
message AttachmentRequest {
  string bucket_name = 1;
  string file_id = 2;
}

/*
  Response messages
*/

// returns a chat containing messages in bucket 0
message ChatResponse {
  shared.Result result = 1;
  GrpcChat chat = 2;
}

// returns multiple chats with only the latest messages, other messages are retrieved in background
message ChatsResponse {
  shared.Result result = 1;
  repeated GrpcChat chats = 2;
}

// returns a group containing messages in bucket 0
message GroupResponse {
  shared.Result result = 1;
  GrpcGroup group = 2;
}

// returns multiple groups with only the latest messages, other messages are retrieved in background
message GroupsResponse {
  shared.Result result = 1;
  repeated GrpcGroup groups = 2;
}

// returns message in the requested bucket
message BucketResponse {
  shared.Result result = 1;
  repeated GrpcMessage messages = 2;
}

// returns users data needed to create a new group or chat
message AvailableUsersResponse {
  shared.Result result = 1;
  repeated UserInfo users = 2;
}

/*
  Sync messages
*/

// rappresenta un'azione del client, come l'invio o la cancellazione di un messaggio o la creazione di una conversazione
message ClientUpdate {
  // l'operazione richiesta
  oneof operation {
    // invio di un nuovo messaggio
    MessageOfCollection sent_message = 1;
    // la cancellazione di un messaggio
    DeleteMessagesRequest deleted_messages = 2;
    // il recupero dei dettagli di una conversazione
    Collection get_collection_details = 3;
  }
}

// rappresenta un update del server, per il client, come un nuovo messaggio o una nuova conversazione
message ServerUpdate {
  shared.Result result = 1;
  // l'operazione effettuata
  oneof operation {
    // il client ha ricevuto un nuovo messaggio
    MessageOfCollection received_message = 2;
    // il client ha richiesto o e' stato aggiunto ad una nuova chat
    GrpcChat chat = 3;
    // il client ha richiesto o e' stato aggiunto ad un nuovo gruppo
    GrpcGroup group = 4;
    // il client deve eliminare dei messaggi
    DeleteMessagesRequest deleted_messages = 5;
  }
}

// rappresenta le api per le chat e i gruppi
service GrpcConversationServices {
  // ottiene la definizione di un gruppo partendo dall id e l'ultimo blocco di messaggi (la dimensione e' decisa dal server)
  rpc GetUserGroupFromId (shared.IdMessage) returns (GroupResponse);
  // ottiene tutti i gruppi di cui l'utente e' membro
  rpc GetAllUserGroups (google.protobuf.Empty) returns (GroupsResponse);
  // crea un gruppo con gli utenti selezionati
  rpc CreateGroup (GroupCreationRequest) returns (GroupResponse);

  // crea una nuova chat tra utenti singoli
  rpc CreateChat (shared.IdMessage) returns (ChatResponse);
  // ottiene la definizione della chat partendo dall'id e l'ultimo blocco di messaggi (la dimensione e' decisa dal server)
  rpc GetChatFromId (shared.IdMessage) returns (ChatResponse);
  // ottiene la definiozione di ogni chat di cui l'utente e' membro
  rpc GetAllUserOwnChats (google.protobuf.Empty) returns (ChatsResponse);

  // ottiene tutti gli utenti con cui e' possibile iniziare una chat
  rpc GetUsersForConversation(google.protobuf.Empty) returns (AvailableUsersResponse);
  // ottiene i messaggi di un gruppo o una chat, in blocchi di dimensione fisssata dal server
  rpc GetMessagesInRange (MessageChunkRequest) returns (BucketResponse);
  // ottiene il contenuto di un allegato
  rpc GetAttachmentData (AttachmentRequest) returns (GrpcAttachment);
  // mantiene i client sincronizzati col server
  rpc Sync (stream ClientUpdate) returns (stream ServerUpdate);
}

// repprensenta le api per la letture delle chat da parte dei supervisori
service GrpcSupervisedConversationService {
  // ottiene tutte le chat supervisionate, ognuna con l'ultimo messaggio inviato
  rpc GetAllChats (google.protobuf.Empty) returns (ChatsResponse);
  // ottiene tutti i gruppi supervisionati, ognuno con l'ultimo messaggio inviato
  rpc GetAllGroups (google.protobuf.Empty) returns (GroupsResponse);

  // reucpera i messaggi di un gruppo o una chat, in blocchi di dimensione fisssata dal server
  rpc GetMessagesInRange (MessageChunkRequest) returns (BucketResponse);
  // ottiene il contenuto di un allegato
  rpc GetAttachmentData (AttachmentRequest) returns (GrpcAttachment);
}