syntax = "proto3";

package redbox_services;

option csharp_namespace = "RedBoxServices";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "Shared.proto";

message IdRequest {
  string id = 1;
}

message Attachment {
  optional string id = 1;
  string name = 2;
  optional bytes data = 3;
}

message Message {
  optional string id = 1;
  google.protobuf.Timestamp timestamp = 2;
  bytes iv = 3;
  optional bool to_read = 4;
  optional bytes encrypted_text = 5;
  optional string sender_id = 6;
  optional Attachment attachment = 7;
}

message Chat {
  string id = 1;
  string other_user = 2;
  google.protobuf.Timestamp created_at = 3;
  repeated Message messages = 4;
}

message Group {
  string id = 1;
  string name = 2;
  repeated string members = 3;
  repeated string admins = 4;
  google.protobuf.Timestamp created_at = 5;
  repeated Message messages = 6;
  string pic_id = 7;
}

message MessagesResponse {
  shared.Result result = 1;
  repeated Message messages = 2;
}

message OldMessagesRequest {
  oneof collection {
    string chat_name = 1;
    string group_name = 2;
  }
  int32 from = 3;
  int32 to = 4;
}

message MessageFromIdRequest {
  oneof collection {
    string chat_name = 1;
    string group_name = 2;
  }
  string message_id = 3;
}

message DeleteMessagesRequest {
  oneof collection {
    string chat_name = 1;
    string group_name = 2;
  }
  repeated string message_ids = 3;
}

message MessageCreationRequest {
  oneof collection {
    string chat_name = 1;
    string group_name = 2;
  }
  Message message = 3;
}

message ReceivedMessagesResponse {
  shared.Result result = 1;
  message Messages {
    string collection_id = 1;
    repeated Message messages = 2;
  }
  repeated Messages new_chat_messages = 2;
  repeated Messages new_group_messages = 3;
}

message AttachmentRequest {
  string bucket_name = 1;
  string file_id = 2;
}

message ChatResponse {
  shared.Result result = 1;
  Chat chat = 2;
}

message ChatsResponse {
  shared.Result result = 1;
  repeated Chat chats = 2;
}

message GroupResponse {
  shared.Result result = 1;
  Group group = 2;
}

message GroupsResponse {
  shared.Result result = 1;
  repeated Group groups = 2;
}

message GroupCreationRequest {
  string group_name = 1;
  repeated string members = 2;
  repeated string admins = 3;
  bytes pic = 4;
}

service GrpcConversationServices {
  rpc GetUserGroupFromId (IdRequest) returns (GroupResponse);
  rpc GetAllUserGroups (google.protobuf.Empty) returns (GroupsResponse);
  rpc CreateGroup (GroupCreationRequest) returns (GroupResponse);

  rpc CreateChat (IdRequest) returns (ChatResponse);
  rpc GetUserChatFromId (IdRequest) returns (ChatResponse);
  rpc GetAllUserChats (google.protobuf.Empty) returns (ChatsResponse);

  rpc GetOldMessages (OldMessagesRequest) returns (MessagesResponse);
  rpc GetNewMessages (google.protobuf.Empty) returns (ReceivedMessagesResponse);
  rpc SendMessage (MessageCreationRequest) returns (shared.Result);
  rpc MarkMessageAsRead (MessageFromIdRequest) returns (shared.Result);
  rpc DeleteMessages (DeleteMessagesRequest) returns (shared.Result);
}